---
# OPTIONAL TASKS (needed to run checks from the host machine)
# - name: Uncomment the GitLab IP whitelist line
#   replace:
#     path: /etc/gitlab/gitlab.rb
#     regexp: '^# (gitlab_rails\[''monitoring_whitelist''\] = \[.*)\]$'
#     replace: '\1, ''20.20.20.1'']'

# - name: Reconfigure GitLab
#   command: gitlab-ctl reconfigure

# - name: Restart unicorn
#   command: gitlab-ctl restart unicorn
#   retries: 2
# END OF OPTIONAL TASKS

- name: Check GitLab health
  uri:
    url: http://127.0.0.1/-/health
    return_content: yes
  # Register the output of the module in a variable
  register: gitlab_health

- name: Print GitLab health
  debug:
    msg: "{{ gitlab_health.content }}"

- name: Check Gittlab Readiness
  uri:
    url: http://127.0.0.1/-/readiness
    return_content: yes
  # Register the output of the module in a variable
  register: gitlab_readiness

- name: Print GitLab Readiness
  debug:
    msg: "{{ gitlab_readiness.content }}"

- name: Check Gittlab Liveness
  uri:
    url: http://127.0.0.1/-/liveness
    return_content: yes
  # Register the output of the module in a variable
  register: gitlab_liveness

- name: Print GitLab liveness
  debug:
    msg: "{{ gitlab_liveness.content }}"

- name: Check Service Readiness
  command: gitlab-ctl status --json
  register: gitlab_status
  ignore_errors: yes  # Ignore errors since some services may be stopped intentionally

- name: Print Dysfunctional Services
  debug:
    msg: "Dysfunctional service(s): {{ gitlab_status.stdout | from_json | json_query('!*[status==`down`].name') | join(', ') }}"
  when: gitlab_status.rc != 0  # Only print when there is an error (some service is down)
